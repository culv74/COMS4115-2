import sys
from lexer import Lexer
from parser import Parser

def parse_file(file_to_parse):
    # Determine file extension
    ext = file_to_parse.split('.')[-1]

    # Read the contents of the provided file
    with open(file_to_parse, 'r') as file:
        source_code = file.read()

    if ext == 'py' or ext == 'txt':
        print(f"Parsing {file_to_parse}...")

        # Step 1: Tokenize the source code using the Lexer
        lexer = Lexer(source_code)  # Initialize lexer with the source code
        tokens = lexer.tokenize()  # Tokenize the source code

        # Step 2: Print out the tokens generated by the lexer (optional step for debugging)
        print("Tokens Generated by Lexer:")
        for token in tokens:
            print(f"<{token[0]}, {token[1]}>")

        # Step 3: Parse the tokens using the Parser to generate an AST
        parser = Parser(tokens)  # Initialize parser with the tokenized input
        ast = parser.parse_program()  # Generate AST from the tokens

        # Step 4: Print the generated AST (ensure __str__ or __repr__ methods are implemented in AST)
        print("\nGenerated AST:")
        print(ast)
    else:
        print("Unsupported file type. Please provide a .py or .txt file.")
        sys.exit(1)

if __name__ == "__main__":
    # Ensure the file argument is provided
    if len(sys.argv) != 2:
        print("Usage: python parse.py <file_to_parse.py or file_to_parse.txt>")
        sys.exit(1)

    # Get the filename from command-line arguments
    file_to_parse = sys.argv[1]

    # Call the function to parse the file
    parse_file(file_to_parse)
